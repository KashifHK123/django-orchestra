"""
Django settings for {{ project_name }} project.

Generated by 'django-admin startproject' using Django {{ django_version }}.

For more information on this file, see
https://docs.djangoproject.com/en/{{ docs_version }}/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/{{ docs_version }}/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '{{ secret_key }}'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


# Application definition

INSTALLED_APPS = [
    # django-orchestra apps
    'orchestra',
    'orchestra.contrib.accounts',
    'orchestra.contrib.contacts',
    'orchestra.contrib.orchestration',
    'orchestra.contrib.domains',
    'orchestra.contrib.systemusers',
    'orchestra.contrib.mailboxes',
    'orchestra.contrib.lists',
    'orchestra.contrib.webapps',
    'orchestra.contrib.websites',
    'orchestra.contrib.databases',
    'orchestra.contrib.vps',
    'orchestra.contrib.saas',
    'orchestra.contrib.issues',
    'orchestra.contrib.services',
    'orchestra.contrib.plans',
    'orchestra.contrib.orders',
    'orchestra.contrib.miscellaneous',
    'orchestra.contrib.bills',
    'orchestra.contrib.payments',
    'orchestra.contrib.tasks',
    
    # Third-party apps
    'django_extensions',
    'djcelery',
    'djcelery_email',
    'fluent_dashboard',
    'admin_tools',
    'admin_tools.theming',
    'admin_tools.menu',
    'admin_tools.dashboard',
    'rest_framework',
    'rest_framework.authtoken',
    'passlib.ext.django',
    'django_countries',
#    'django_mailer',
#    'debug_toolbar',
    
    # Django.contrib
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.admin.apps.SimpleAdminConfig',
    
    # Last to load
    'orchestra.contrib.resources',
    'orchestra.contrib.settings',
]


MIDDLEWARE_CLASSES = [
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'orchestra.core.caches.RequestCacheMiddleware',
    # also handles transations, ATOMIC_REQUESTS does not wrap middlewares
    'orchestra.contrib.orchestration.middlewares.OperationsMiddleware',
]


ROOT_URLCONF = '{{ project_name }}.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'orchestra.core.context_processors.site',
            ],
        },
    },
]


WSGI_APPLICATION = '{{ project_name }}.wsgi.application'


# Database
# https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        'USER': '',         # Not used with sqlite3.
        'PASSWORD': '',     # Not used with sqlite3.
        'HOST': '',       # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',                # Set to empty string for default. Not used with sqlite3.
        'CONN_MAX_AGE': 60*10      # Enable persistent connections
    }
}


# Internationalization
# https://docs.djangoproject.com/en/{{ docs_version }}/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/{{ docs_version }}/howto/static-files/

STATIC_URL = '/static/'


# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/home/media/media.lawrence.com/static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'static')


# Path used for database translations files
LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)

ORCHESTRA_SITE_NAME = '{{ project_name }}'


AUTH_USER_MODEL = 'accounts.Account'


AUTHENTICATION_BACKENDS = [
    'orchestra.permissions.auth.OrchestraPermissionBackend',
    'django.contrib.auth.backends.ModelBackend',
]


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '%(asctime)s %(name)s %(levelname)s %(message)s'
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'orchestra.log'),
            'formatter': 'simple'
        },
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'orchestra': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'orm': {
            'handlers': ['file',],
            'level': 'INFO',
            'propagate': True,
        },
    },
}


#################################
## 3RD PARTY APPS CONIGURATION ##
#################################

# Admin Tools
ADMIN_TOOLS_MENU = 'orchestra.admin.menu.OrchestraMenu'

# Fluent dashboard
ADMIN_TOOLS_INDEX_DASHBOARD = 'orchestra.admin.dashboard.OrchestraIndexDashboard'
FLUENT_DASHBOARD_ICON_THEME = '../orchestra/icons'
FLUENT_DASHBOARD_APP_GROUPS = (
    # Services group is generated by orchestra.admin.dashboard
    ('Accounts', {
        'models': (
            'orchestra.contrib.accounts.models.Account',
            'orchestra.contrib.contacts.models.Contact',
            'orchestra.contrib.orders.models.Order',
            'orchestra.contrib.plans.models.ContractedPlan',
            'orchestra.contrib.bills.models.Bill',
            'orchestra.contrib.payments.models.Transaction',
            'orchestra.contrib.issues.models.Ticket',
        ),
        'collapsible': True,
    }),
    ('Administration', {
        'models': (
            'djcelery.models.TaskState',
            'orchestra.contrib.orchestration.models.Route',
            'orchestra.contrib.orchestration.models.BackendLog',
            'orchestra.contrib.orchestration.models.Server',
            'orchestra.contrib.resources.models.Resource',
            'orchestra.contrib.resources.models.ResourceData',
            'orchestra.contrib.services.models.Service',
            'orchestra.contrib.plans.models.Plan',
            'orchestra.contrib.miscellaneous.models.MiscService',
        ),
        'collapsible': True,
    }),
)

FLUENT_DASHBOARD_APP_ICONS = {
    # Services
    'webs/web': 'web.png',
    'mail/address': 'X-office-address-book.png',
    'mailboxes/mailbox': 'email.png',
    'mailboxes/address': 'X-office-address-book.png',
    'lists/list': 'email-alter.png',
    'domains/domain': 'domain.png',
    'multitenance/tenant': 'apps.png',
    'webapps/webapp': 'Applications-other.png',
    'websites/website': 'Applications-internet.png',
    'databases/database': 'database.png',
    'databases/databaseuser': 'postgresql.png',
    'vps/vps': 'TuxBox.png',
    'miscellaneous/miscellaneous': 'applications-other.png',
    'saas/saas': 'saas.png',
    'systemusers/systemuser': 'roleplaying.png',
    # Accounts
    'accounts/account': 'Face-monkey.png',
    'contacts/contact': 'contact_book.png',
    'orders/order': 'basket.png',
    'plans/contractedplan': 'ContractedPack.png',
    'services/service': 'price.png',
    'bills/bill': 'invoice.png',
    'payments/paymentsource': 'card_in_use.png',
    'payments/transaction': 'transaction.png',
    'payments/transactionprocess': 'transactionprocess.png',
    'issues/ticket': 'Ticket_star.png',
    'miscellaneous/miscservice': 'Misc-Misc-Box-icon.png',
    # Administration
    'settings/setting': 'preferences.png',
    'djcelery/taskstate': 'taskstate.png',
    'orchestration/server': 'vps.png',
    'orchestration/route': 'hal.png',
    'orchestration/backendlog': 'scriptlog.png',
    'resources/resource': "gauge.png",
    'resources/resourcedata': "monitor.png",
    'plans/plan': 'Pack.png',
}


# Django-celery
import djcelery
djcelery.setup_loader()
CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'
